(Q1) Uma função em C que, dada uma árvore B qualquer, retorne, numa lista, todos
os elementos maiores que N. A função deve ter o seguinte protótipo: TLSE* mN(TARVB*a, int N);

(Q2) Retornar todas as informações ancestrais de um nó na árvore B, da raiz da árvore até o elemento passado como parâmetro, usando a biblioteca de lista encadeada - TLSEINT* misc(TARVB *a, int elem), onde:

typedef struct lseint{
  int lim_inf, lim_sup;
  struct lseint *prox;
} TLSEINT;

(Q3) Refaça (Q1) e (Q2) com TARVBM;

(Q4) Dados dois arquivos texto que representam conjuntos inteiros (isto é, não há elementos repetidos nos arquivos), um elemento por linha, e fazendo SOMENTE uma leitura em cada arquivo, faça cada uma das questões utilizando tabelas hash em memória secundária:
(a) interseção dos conjuntos: void inter(char* arq1, char* arq2, char* saida);

(b) diferença simétrica de conjuntos: void dif_sim(char* arq1, char* arq2, char* saida);

(c) união de conjuntos: void uniao(char* arq1, char* arq2, char* saida); e

(Q5) Refaça (Q4) para memória principal, recebendo no lugar de nome de arquivo, um vetor e seu tamanho (isto é, int *vet, int n).

(Q6) Refaça as bibliotecas de heap para funcionar com heaps ternárias. Assim, no lugar de termos funções de esquerda e direita, teremos funções que retornam os três possíveis filhos de um nó (isto é, escreva as funções filho_1, filho_2 e filho3).